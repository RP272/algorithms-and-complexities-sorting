#ifndef SORTINGALGORITHM_H
#define SORTINGALGORITHM_H
#include <algorithm>

template <typename T>
class SortingAlgorithm
{
	/*
	This is an abstract template class which defines common data for sorting algortihm.
	*/
	public:
		int number_of_elements;
		T* data_to_sort;

		SortingAlgorithm(T* data_to_sort, int number_of_elements) {
			/*
			The constructor does a deep copy of data given as input in order to not modify the arrray generated by user.
			*/
			this->data_to_sort = new T[number_of_elements];
			std::memcpy(this->data_to_sort, data_to_sort, sizeof(T) * number_of_elements);
			this->number_of_elements = number_of_elements;
		}

		~SortingAlgorithm() {
			delete this->data_to_sort;
		}

		/*
		Abstract method which is implemented in every class which inherits from SortingAlgortihm.
		*/
		virtual void sort() = 0;

		void swap(T* data_to_sort, int a, int b) {
			/*
			Function which swaps two elements in the array.
			*/
			T tmp;
			tmp = data_to_sort[a];
			data_to_sort[a] = data_to_sort[b];
			data_to_sort[b] = tmp;
		}

		void print_table() {
			for (int i = 0; i < this->number_of_elements; i++) {
				std::cout << this->data_to_sort[i] << " ";
			}
			std::cout << std::endl;
		}

		void array_sorted() {
			/*
			Function which checks if the array has been sorted properly.
			Useful for arrays with huge number of elements.
			*/
			bool sorted = true;
			for (int i = 1; i < this->number_of_elements; i++) {
				if (this->data_to_sort[i] < this->data_to_sort[i - 1]) {
					sorted = false;
					break;
				}
			}
			if (sorted == true) {
				std::cout << "Dane posortowane poprawnie" << std::endl;
			}
			else {
				std::cout << "Dane nie zostaly posortowane ppoprawnie" << std::endl;
			}
		}

		void sort_first_n_elements(int n) {
			/*
			Function which sorts only first n number of elements.
			Used in order to sort the first 33% and 66% elements of generated data by user.
			*/
			this->sort();
			std::random_shuffle(&this->data_to_sort[n + 1], &this->data_to_sort[this->number_of_elements - 1]);
		}

		T* get_data_to_sort() {
			return this->data_to_sort;
		}
};

#endif